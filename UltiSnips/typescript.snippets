priority -50

extends javascript

# We want to overwrite everything in parent ft.
priority -49


snippet tsx "react component" b
import React from "react";

interface Props {
    propName?: string;
}

export function ComponentName({ propName }: Props) {
    return (<div></div>)
}
endsnippet

snippet div "div" i
<div>$0</div>
endsnippet

snippet p "div" i
<p>$0</p>
endsnippet

snippet h1 "div" i
<h1>$0</h1>
endsnippet

snippet /// "import reference" b
/// <reference path='${1: file}' />
$0
endsnippet

snippet ctor "constructor" b
constructor(${0}) {
	${1:// code}
}
endsnippet

snippet cls "class .." b
class ${1:ClassName}${2: extends ${3:ParentClass}} {
	${4: constructor(${5:args}) {
    ${6://code...}
  }}
}
endsnippet

snippet itf "interface .." b
interface ${1:InterfaceName}${2: extends ${3:Parent}} {
	${4://code...}
}
endsnippet

snippet for "for (...) {...} (counting up)" b
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet fn "function literal (fn)"
function (${1:argument}) {
	${VISUAL}$0
}
endsnippet

snippet af "arrow function (af)"
(${1:argument}) => {
	${VISUAL}$0
}
endsnippet

snippet ife "if ___ else"
if (${1:condition}) {
	${2://code}
}
else {
	${3://code}
}
endsnippet

snippet cl "console.log" i
console.log(${1:"${2:value}"})
endsnippet

snippet log "console.log" i
console.log(${1:"${2:value}"})
endsnippet

snippet logd "console.log with lines" i
// TODO: Remove this log
console.log("=========================================")
console.log(${1:"${2:value}"})
console.log("=========================================")
endsnippet

snippet meth "class/object method" b
${2:methodName}(${3:args}): ${4:void} {
		${0://code}
}
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

snippet dclm "declare module" b
declare module ${1:name} {
	${VISUAL}$0
}
endsnippet

# Perso

snippet useState "React useState" b
const [visibility, setVisibility] = useState<"visible" | "hidden">("visible");
endsnippet


snippet useEffect "React useEffect" b
useEffect(() => {
	setValue(someValue, 42)
}, [someValue]);
endsnippet

snippet testfile "Jest describe" b
jest.mock("../toMock");
describe("$1", () => {
	it("$2", () => {
		const value = false;
		expect(value).toBeFalsy();$0
	});
});
endsnippet

snippet desc "Jest describe" b
describe("$1", () => {
	it("$2", () => {
		const value = false;
		expect(value).toBeFalsy();$0
	});
});
endsnippet

snippet it "Jest it" b
it("$1", () => {
	const value = false;
	expect(value).toBeFalsy();$0
});
endsnippet

snippet iteach "Jest parametrized it" b
test.each\`
  a    | b    | expected
  \${1} | \${1} | $\{2}
\`('returns $expected when $a is added $b', ({a, b, expected}) => {
  expect(a + b).toBe(expected);
});
endsnippet

snippet act "React Testing Library act" b
await act(async () => {
	${0:Some action that update dom}
});
endsnippet

snippet waitfor "waitFor(()=>{})"
await waitFor(() => {})
endsnippet

snippet unit "mathjs unit conversion"
unit(${1:value}, ${2:unit}).toNumber("${3:unit}").toFixed(${4:decimals})$0
endsnippet

snippet expectfindby "mathjs unit conversion"
expect(await screen.findByText("${1:text}")).toBeInTheDocument();${0}
endsnippet

snippet debugtest "react testing lib debug"
await act(async () => { screen.debug(document, 9999999); });
endsnippet

snippet debugreacthookform "debug rhf with useEffect"
useEffect(() => { console.log(`height: ${watch("rhf_name")}`); }, [watch]);
endsnippet

snippet
(fetchProjectFieldValues as jest.Mock).mockResolvedValue(["sello"]);
endsnippet

snippet mockmodule "mock module"
const mockedFetchProjectFieldValues = jest.fn();
mockedFetchProjectFieldValues.mockResolvedValue(["SomeOption"]);
jest.mock("../../commons/fetchFieldValues.ts", () => ({
    ...jest.requireActual("../../commons/fetchFieldValues.ts"),
    fetchProjectFieldValues: () => mockedFetchProjectFieldValues,
}));
endsnippet

snippet f "arrow function"
(${1:args}): ${2:type} => {${0:code}}
endsnippet
