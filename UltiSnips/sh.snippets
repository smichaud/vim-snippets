priority -50

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet shebang "#!/usr/bin/env bash"
#!/usr/bin/env bash

endsnippet

snippet todo "# TODO: "
# TODO: ${0:Do not forget this}
endsnippet

snippet read "input a variable"
read -p "${1:Question}" ${0:variable}
endsnippet

snippet if "if ... then (if)"
if [ ${1:lvalue} ${2:-eq} ${3:rvalue} ]; then
	${0:#statements}
fi
endsnippet

snippet elif "elif .. (elif)"
elif [ ${1:lvalue} ${2:-eq} ${3:rvalue} ]; then
	${0:#statements}
endsnippet

snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern} )
		${0:#statement};;
esac
endsnippet

snippet case+ "add case (case)"
${1:pattern} )
	${0:#statement};;
endsnippet

snippet for "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
	${0:#statements}
done
endsnippet

snippet forin "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:#statements}
done
endsnippet

snippet until "until ... (done)"
until [ ${1:condition} ]; do
	${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while [ ${1:condition} ]; do
	${0:#statements}
done
endsnippet

# vim:ft=snippets:
